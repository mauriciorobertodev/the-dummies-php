<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: server.proto

namespace Lugo;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * The kick order is only executed by the ball holder, and it is processed immediately.
 * Important: The kick velocity is summed to the current ball velocity.
 * The kick speed will suffer a power reduction proportionally to the player direction when the kick is not in the
 * same direction of the player direction. The reduction is calculated based on the angle with the player direction
 * using the formula `SpeedReducerFactor = 0.5 + (0.5 * ((180 - ang) / 180))`
 * In summary, the speed will by reduced proportionally to the angle from 100% at 0 degrees until the limit of
 * 50% at 180 degrees.
 *
 * Generated from protobuf message <code>lugo.KickOrder</code>
 */
class KickOrder extends \Google\Protobuf\Internal\Message
{
    /**
     * KickOrder velocity (it won't be necessarily the final ball velocity)
     *
     * Generated from protobuf field <code>.lugo.Velocity velocity = 1;</code>
     */
    private $velocity = null;

    public function __construct() {
        \GPBMetadata\Server::initOnce();
        parent::__construct();
    }

    /**
     * KickOrder velocity (it won't be necessarily the final ball velocity)
     *
     * Generated from protobuf field <code>.lugo.Velocity velocity = 1;</code>
     * @return \Lugo\Velocity
     */
    public function getVelocity()
    {
        return $this->velocity;
    }

    /**
     * KickOrder velocity (it won't be necessarily the final ball velocity)
     *
     * Generated from protobuf field <code>.lugo.Velocity velocity = 1;</code>
     * @param \Lugo\Velocity $var
     * @return $this
     */
    public function setVelocity($var)
    {
        GPBUtil::checkMessage($var, \Lugo\Velocity::class);
        $this->velocity = $var;

        return $this;
    }

}

