<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: physics.proto

namespace Lugo;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Velocity is a tuple with the direction (a vector) an a speed (float) values.
 * It defines the velocity of an object.
 *
 * Generated from protobuf message <code>lugo.Velocity</code>
 */
class Velocity extends \Google\Protobuf\Internal\Message
{
    /**
     * Direction is a normalised vector that indicates the element direction
     *
     * Generated from protobuf field <code>.lugo.Vector direction = 1;</code>
     */
    private $direction = null;
    /**
     * Speed of the element.
     *
     * Generated from protobuf field <code>double speed = 2;</code>
     */
    private $speed = 0.0;

    public function __construct() {
        \GPBMetadata\Physics::initOnce();
        parent::__construct();
    }

    /**
     * Direction is a normalised vector that indicates the element direction
     *
     * Generated from protobuf field <code>.lugo.Vector direction = 1;</code>
     * @return \Lugo\Vector
     */
    public function getDirection()
    {
        return $this->direction;
    }

    /**
     * Direction is a normalised vector that indicates the element direction
     *
     * Generated from protobuf field <code>.lugo.Vector direction = 1;</code>
     * @param \Lugo\Vector $var
     * @return $this
     */
    public function setDirection($var)
    {
        GPBUtil::checkMessage($var, \Lugo\Vector::class);
        $this->direction = $var;

        return $this;
    }

    /**
     * Speed of the element.
     *
     * Generated from protobuf field <code>double speed = 2;</code>
     * @return float
     */
    public function getSpeed()
    {
        return $this->speed;
    }

    /**
     * Speed of the element.
     *
     * Generated from protobuf field <code>double speed = 2;</code>
     * @param float $var
     * @return $this
     */
    public function setSpeed($var)
    {
        GPBUtil::checkDouble($var);
        $this->speed = $var;

        return $this;
    }

}

