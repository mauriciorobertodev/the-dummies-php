<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: server.proto

namespace Lugo;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Stores all ball attributes
 *
 * Generated from protobuf message <code>lugo.Ball</code>
 */
class Ball extends \Google\Protobuf\Internal\Message
{
    /**
     * Current position
     *
     * Generated from protobuf field <code>.lugo.Point position = 1;</code>
     */
    private $position = null;
    /**
     * Current velocity. It will be the exactly same velocity as the ball holder when a player is holding it.
     *
     * Generated from protobuf field <code>.lugo.Velocity velocity = 2;</code>
     */
    private $velocity = null;
    /**
     * Player that is currently holding the ball. Null if the ball is not holden.
     *
     * Generated from protobuf field <code>.lugo.Player holder = 3;</code>
     */
    private $holder = null;

    public function __construct() {
        \GPBMetadata\Server::initOnce();
        parent::__construct();
    }

    /**
     * Current position
     *
     * Generated from protobuf field <code>.lugo.Point position = 1;</code>
     * @return \Lugo\Point
     */
    public function getPosition()
    {
        return $this->position;
    }

    /**
     * Current position
     *
     * Generated from protobuf field <code>.lugo.Point position = 1;</code>
     * @param \Lugo\Point $var
     * @return $this
     */
    public function setPosition($var)
    {
        GPBUtil::checkMessage($var, \Lugo\Point::class);
        $this->position = $var;

        return $this;
    }

    /**
     * Current velocity. It will be the exactly same velocity as the ball holder when a player is holding it.
     *
     * Generated from protobuf field <code>.lugo.Velocity velocity = 2;</code>
     * @return \Lugo\Velocity
     */
    public function getVelocity()
    {
        return $this->velocity;
    }

    /**
     * Current velocity. It will be the exactly same velocity as the ball holder when a player is holding it.
     *
     * Generated from protobuf field <code>.lugo.Velocity velocity = 2;</code>
     * @param \Lugo\Velocity $var
     * @return $this
     */
    public function setVelocity($var)
    {
        GPBUtil::checkMessage($var, \Lugo\Velocity::class);
        $this->velocity = $var;

        return $this;
    }

    /**
     * Player that is currently holding the ball. Null if the ball is not holden.
     *
     * Generated from protobuf field <code>.lugo.Player holder = 3;</code>
     * @return \Lugo\Player
     */
    public function getHolder()
    {
        return $this->holder;
    }

    /**
     * Player that is currently holding the ball. Null if the ball is not holden.
     *
     * Generated from protobuf field <code>.lugo.Player holder = 3;</code>
     * @param \Lugo\Player $var
     * @return $this
     */
    public function setHolder($var)
    {
        GPBUtil::checkMessage($var, \Lugo\Player::class);
        $this->holder = $var;

        return $this;
    }

}

